#!/bin/bash

#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --gres=gpu:1
#SBATCH --mem=40G
#SBATCH --partition=t4v2
#SBATCH --qos=m
#SBATCH --time=8:00:00


# Note:
#	  ntasks: Total number of processes to use across world
#	  ntasks-per-node: How many processes each node should create

# Set NCCL options
# export NCCL_DEBUG=INFO
# NCCL backend to communicate between GPU workers is not provided in vector's cluster.
# Disable this option in slurm.
export NCCL_IB_DISABLE=1

if [[ "${SLURM_JOB_PARTITION}" == "t4v2" ]] || \
    [[ "${SLURM_JOB_PARTITION}" == "rtx6000" ]]; then
    echo export NCCL_SOCKET_IFNAME=bond0 on "${SLURM_JOB_PARTITION}"
    export NCCL_SOCKET_IFNAME=bond0
fi

# WARNING: Update the following paths to match your environment
export HF_HOME=/projects/fl4health/flower_env/temp

# Process inputs
SERVER_PORT=$1
CONFIG_PATH=$2
ARTIFACT_DIR=$3
LOG_DIR=$4
VENV_PATH=$5
JOB_HASH=$6

RUN_NAME="Run1"
SEED=2021

echo "Server Port number: ${SERVER_PORT}"
echo "Config Path: ${CONFIG_PATH}"
echo "Python Venv Path: ${VENV_PATH}"
echo "Job Hash: ${JOB_HASH}"
echo "Artifacts Dir: ${ARTIFACT_DIR}"
echo "Log Dir: ${LOG_DIR}"
echo "Run Name: ${RUN_NAME}"
echo "Seed: ${SEED}"

# Print the name of the node, this will be the network address
echo "Node Name: ${SLURMD_NODENAME}"
echo "Server Port number: ${SERVER_PORT}"
echo "Config Path: ${CONFIG_PATH}"
echo "Python Venv Path: ${VENV_PATH}"
echo "Job Hash: ${JOB_HASH}"

SERVER_ADDRESS="${SLURMD_NODENAME}:${SERVER_PORT}"

echo "Server Address: ${SERVER_ADDRESS}"

LOG_PATH="${LOG_DIR}server_log_${JOB_HASH}.log"

echo "Placing logs in: ${LOG_DIR}"
echo "World size: ${SLURM_NTASKS}"
echo "Number of nodes: ${SLURM_NNODES}"
NUM_GPUs=$(nvidia-smi --query-gpu=name --format=csv,noheader | wc -l)
echo "GPUs per node: ${NUM_GPUs}"

# Source the environment
source ${VENV_PATH}bin/activate
echo "Active Environment:"
which python


# create the run directory
RUN_DIR="${ARTIFACT_DIR}${RUN_NAME}/"
echo "Starting Run and logging artifcats at ${RUN_DIR}"
if [ -d "${RUN_DIR}" ]
then
    # Directory already exists, we check if the done.out file exists
    if [ -f "${RUN_DIR}done.out" ]
    then
        # Done file already exists so we skip this run
        echo "Run already completed. Skipping Run."
        continue
    else
        # Done file doesn't exists (assume pre-emption happened)
        # Delete the partially finished contents and start over
        echo "Run did not finished correctly. Re-running."
        rm -r "${RUN_DIR}"
        mkdir "${RUN_DIR}"
    fi
else
    # Directory doesn't exist yet, so we create it.
    echo "Run directory does not exist. Creating it."
    mkdir "${RUN_DIR}"
fi


python -m examples.fedllm_example.server \
    --config_path ${CONFIG_PATH} \
    --artifact_dir ${ARTIFACT_DIR} \
    --run_name ${RUN_NAME} \
    --server_address ${SERVER_ADDRESS} \
    --seed ${SEED} \
    > ${LOG_PATH} 2>&1


echo ${SERVER_ADDRESS}
