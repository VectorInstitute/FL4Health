[tool.poetry]
name = "fl4health"
version = "0.4.0"
description = "Federated Learning for Health"
authors = ["Vector AI Engineering <fl4health@vectorinstitute.ai>"]
license = "Apache-2.0"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = ">=3.10.0,<3.11"
numpy = "^1.24"
pandas = "^2.0"
flwr = "~1.18.0"
opacus = "^1.3.0"
torch = "^2.4.1"
pycyclops = "^0.2.12"
pyarrow = "^17.0.0" # Pin as there is potential ACE with v0.14.2 that is resolved in v17.0
dp-accounting = "^0.4.3"
torchmetrics = "^1.3.0"
aiohttp = "^3.12.14"
ecos = "^2.0.7.post1"
qpth = "^0.0.16"
urllib3 = "^2.4.0"
grpcio = "^1.60.0,!=1.64.2,!=1.65.1,!=1.65.2,!=1.65.4"
monai = "^1.3.0"
nnunetv2 = "^2.3.1"
wandb = "^0.18.0"
acvl_utils = "0.2" # Pin as it was causing an issue with nnunet (ModuleNotFoundError: No module named 'blosc2')
scikit-learn = "1.5.0" # Pin as it was causing issues with nnunet
peft = "^0.14.0"
jupyter-core = "^5.8.1"
fastapi = "^0.115.12"
tornado = "^6.5"
pympler = "^1.1"
flwr-datasets = "^0.5.0"
dm-tree = "^0.1.9"
cmake = "^3.31.6"
matplotlib = "^3.10.1"

[tool.poetry.group.dev.dependencies]
# locked the 2.15 version because of restrictions with tensorflow-io
# (see https://pypi.org/project/tensorflow-io/ section "TensorFlow Version Compatibility")
tensorflow = "2.15"
nltk = "^3.8.0"
torchvision = "^0.19.0"
torchinfo = "^1.8.0"
ipykernel = "^6.25.1"
poetry = "^2.1.3"
pytest-test-groups = "^1.2.1"
torchtext = "^0.14.1"
torchdata = "^0.7.0"
torcheval = "^0.0.6"
transformers = "^4.37.2"
datasets = "^2.17.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
mock = "^5.1.0"
pytest-cov = "^4.1.0"
freezegun = "^1.4.0"
pytest-asyncio = "^0.25.2"
py-cpuinfo = "^9.0.0"

[tool.poetry.group.codestyle.dependencies]
ruff = "^0.12.1"
pre-commit = "^3.0.1"
toml = "^0.10.2"
types-requests = "^2.28.11.8"
types-setuptools = "^65.7.0.3"
types-protobuf = "^4.24.0.4"
types-pyyaml = "^6.0.12.12"
types-six = "^1.16.21.9"
types-tabulate = "^0.9.0.3"
pip-audit = "^2.4"
cyclonedx-python-lib = "<6"  # fix to make pip-audit 2.4 work
mypy = "^1.9.0"


[tool.poetry.group.picai.dependencies]
simpleitk = "^2.3.1"
openpyxl = "^3.1.2"
picai_eval = "^1.4.6"
mlflow = ">=2.12.2,<4.0.0"
fire = "^0.6.0"
einops = "0.8.0"


[tool.poetry.group.llm.dependencies]
trl = "^0.14.0"
tiktoken = "^0.8.0"
blobfile = "^3.0.0"
sentencepiece = "^0.2.0"
evaluate = "^0.4.3"
py7zr = "^0.22.0"
rouge-score = "^0.1.2"
deepspeed = "0.14.4"

[tool.poetry.group.docs.dependencies]
furo = "^2024.8.6"
ipykernel = "^6.29.5"
ipython = "^8.31.0"
myst-parser = "^4.0.0"
nbsphinx = "^0.9.6"
numpydoc = "^1.8.0"
sphinx = "^8.1.3"
sphinx-autoapi = "^3.4.0"
sphinx-autodoc-typehints = "^3.0.1"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.6.1"
sphinxcontrib-apidoc = "^0.5.0"
sphinx-autobuild = "^2024.10.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
include = ["*.py", "pyproject.toml"]
exclude = ["mypy_disallow_legacy_types.py", "*.ipynb", "conf.py"]
line-length = 119

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
    "D213", # Multiline Docstrings start on newline
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL", "D213"]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary line and description
    "ERA001", # Found commented-out code (too many false positives with math comments)
    "PLR0913", # Too many arguments
    "COM812", # Missing trailing comma
    "A001", # Ignore variable `input` is shadowing a Python builtin
    "A002", # Ignore variable `input` is shadowing a Python builtin in function
    "PLR0915", # Too many statements (> 50)
    "PLR0912", # Too many branches (>12)
    "PLW2901", # `for` loop variable `target` overwritten by assignment target
    "D212", # Multi-line docstring summary should start at the first line
    "D301", # r-strings for docstrings with backslashes
    "D101", # Public class requires documentation. Ignoring since we document our inits
    "D100", # TEMPORARY IGNORE: Ignore module level docstrings requirement
    "D104", # TEMPORARY IGNORE: Ignore package level docstrings requirement
    "D103", # TEMPORARY IGNORE WILL FIX: Undocumented public function
    "D102", # TEMPORARY IGNORE WILL FIX: Undocumented public method
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]
# Ignoring undocumented public functions, public init, magic method, and magic numbers
"tests/*" = ["D103", "D105", "D107", "PLR2004"]
# Ignoring undocumented, public init, magic method, and magic numbers
"research/*" = ["PLR2004", "D105", "D107"]
# Ignoring undocumented public init
"examples/*" = ["D107"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["SimpleITK", "F", "NN"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 119

[tool.ruff.lint.flake8-builtins]
strict-checking = false

[tool.pytest.ini_options]
markers = [
    "smoketest: marks tests as smoke tests (deselect with '-m \"not smoketest\"')",
]
asyncio_default_fixture_loop_scope = "session"
